// Generated by jextract

package ffi.ort;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OrtCompileApi {
 *     void (*ReleaseModelCompilationOptions)(OrtModelCompilationOptions *);
 *     OrtStatusPtr (*CreateModelCompilationOptionsFromSessionOptions)(const OrtEnv *, const OrtSessionOptions *, OrtModelCompilationOptions **);
 *     OrtStatusPtr (*ModelCompilationOptions_SetInputModelPath)(OrtModelCompilationOptions *, const char *);
 *     OrtStatusPtr (*ModelCompilationOptions_SetInputModelFromBuffer)(OrtModelCompilationOptions *, const void *, size_t);
 *     OrtStatusPtr (*ModelCompilationOptions_SetOutputModelPath)(OrtModelCompilationOptions *, const char *);
 *     OrtStatusPtr (*ModelCompilationOptions_SetOutputModelExternalInitializersFile)(OrtModelCompilationOptions *, const char *, size_t);
 *     OrtStatusPtr (*ModelCompilationOptions_SetOutputModelBuffer)(OrtModelCompilationOptions *, OrtAllocator *, void **, size_t *);
 *     OrtStatusPtr (*ModelCompilationOptions_SetEpContextEmbedMode)(OrtModelCompilationOptions *, bool);
 *     OrtStatusPtr (*CompileModel)(const OrtEnv *, const OrtModelCompilationOptions *);
 * }
 * }
 */
public class OrtCompileApi {

    OrtCompileApi() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        onnxruntime_c_api_h.C_POINTER.withName("ReleaseModelCompilationOptions"),
        onnxruntime_c_api_h.C_POINTER.withName("CreateModelCompilationOptionsFromSessionOptions"),
        onnxruntime_c_api_h.C_POINTER.withName("ModelCompilationOptions_SetInputModelPath"),
        onnxruntime_c_api_h.C_POINTER.withName("ModelCompilationOptions_SetInputModelFromBuffer"),
        onnxruntime_c_api_h.C_POINTER.withName("ModelCompilationOptions_SetOutputModelPath"),
        onnxruntime_c_api_h.C_POINTER.withName("ModelCompilationOptions_SetOutputModelExternalInitializersFile"),
        onnxruntime_c_api_h.C_POINTER.withName("ModelCompilationOptions_SetOutputModelBuffer"),
        onnxruntime_c_api_h.C_POINTER.withName("ModelCompilationOptions_SetEpContextEmbedMode"),
        onnxruntime_c_api_h.C_POINTER.withName("CompileModel")
    ).withName("OrtCompileApi");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*ReleaseModelCompilationOptions)(OrtModelCompilationOptions *)
     * }
     */
    public static class ReleaseModelCompilationOptions {

        ReleaseModelCompilationOptions() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ReleaseModelCompilationOptions.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ReleaseModelCompilationOptions.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ReleaseModelCompilationOptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ReleaseModelCompilationOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*ReleaseModelCompilationOptions)(OrtModelCompilationOptions *)
     * }
     */
    public static final AddressLayout ReleaseModelCompilationOptions$layout() {
        return ReleaseModelCompilationOptions$LAYOUT;
    }

    private static final long ReleaseModelCompilationOptions$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*ReleaseModelCompilationOptions)(OrtModelCompilationOptions *)
     * }
     */
    public static final long ReleaseModelCompilationOptions$offset() {
        return ReleaseModelCompilationOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*ReleaseModelCompilationOptions)(OrtModelCompilationOptions *)
     * }
     */
    public static MemorySegment ReleaseModelCompilationOptions(MemorySegment struct) {
        return struct.get(ReleaseModelCompilationOptions$LAYOUT, ReleaseModelCompilationOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*ReleaseModelCompilationOptions)(OrtModelCompilationOptions *)
     * }
     */
    public static void ReleaseModelCompilationOptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ReleaseModelCompilationOptions$LAYOUT, ReleaseModelCompilationOptions$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*CreateModelCompilationOptionsFromSessionOptions)(const OrtEnv *, const OrtSessionOptions *, OrtModelCompilationOptions **)
     * }
     */
    public static class CreateModelCompilationOptionsFromSessionOptions {

        CreateModelCompilationOptionsFromSessionOptions() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(CreateModelCompilationOptionsFromSessionOptions.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CreateModelCompilationOptionsFromSessionOptions.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CreateModelCompilationOptionsFromSessionOptions$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CreateModelCompilationOptionsFromSessionOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CreateModelCompilationOptionsFromSessionOptions)(const OrtEnv *, const OrtSessionOptions *, OrtModelCompilationOptions **)
     * }
     */
    public static final AddressLayout CreateModelCompilationOptionsFromSessionOptions$layout() {
        return CreateModelCompilationOptionsFromSessionOptions$LAYOUT;
    }

    private static final long CreateModelCompilationOptionsFromSessionOptions$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CreateModelCompilationOptionsFromSessionOptions)(const OrtEnv *, const OrtSessionOptions *, OrtModelCompilationOptions **)
     * }
     */
    public static final long CreateModelCompilationOptionsFromSessionOptions$offset() {
        return CreateModelCompilationOptionsFromSessionOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CreateModelCompilationOptionsFromSessionOptions)(const OrtEnv *, const OrtSessionOptions *, OrtModelCompilationOptions **)
     * }
     */
    public static MemorySegment CreateModelCompilationOptionsFromSessionOptions(MemorySegment struct) {
        return struct.get(CreateModelCompilationOptionsFromSessionOptions$LAYOUT, CreateModelCompilationOptionsFromSessionOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CreateModelCompilationOptionsFromSessionOptions)(const OrtEnv *, const OrtSessionOptions *, OrtModelCompilationOptions **)
     * }
     */
    public static void CreateModelCompilationOptionsFromSessionOptions(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CreateModelCompilationOptionsFromSessionOptions$LAYOUT, CreateModelCompilationOptionsFromSessionOptions$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static class ModelCompilationOptions_SetInputModelPath {

        ModelCompilationOptions_SetInputModelPath() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ModelCompilationOptions_SetInputModelPath.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ModelCompilationOptions_SetInputModelPath.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ModelCompilationOptions_SetInputModelPath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ModelCompilationOptions_SetInputModelPath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static final AddressLayout ModelCompilationOptions_SetInputModelPath$layout() {
        return ModelCompilationOptions_SetInputModelPath$LAYOUT;
    }

    private static final long ModelCompilationOptions_SetInputModelPath$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static final long ModelCompilationOptions_SetInputModelPath$offset() {
        return ModelCompilationOptions_SetInputModelPath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static MemorySegment ModelCompilationOptions_SetInputModelPath(MemorySegment struct) {
        return struct.get(ModelCompilationOptions_SetInputModelPath$LAYOUT, ModelCompilationOptions_SetInputModelPath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static void ModelCompilationOptions_SetInputModelPath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ModelCompilationOptions_SetInputModelPath$LAYOUT, ModelCompilationOptions_SetInputModelPath$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelFromBuffer)(OrtModelCompilationOptions *, const void *, size_t)
     * }
     */
    public static class ModelCompilationOptions_SetInputModelFromBuffer {

        ModelCompilationOptions_SetInputModelFromBuffer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ModelCompilationOptions_SetInputModelFromBuffer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ModelCompilationOptions_SetInputModelFromBuffer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ModelCompilationOptions_SetInputModelFromBuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ModelCompilationOptions_SetInputModelFromBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelFromBuffer)(OrtModelCompilationOptions *, const void *, size_t)
     * }
     */
    public static final AddressLayout ModelCompilationOptions_SetInputModelFromBuffer$layout() {
        return ModelCompilationOptions_SetInputModelFromBuffer$LAYOUT;
    }

    private static final long ModelCompilationOptions_SetInputModelFromBuffer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelFromBuffer)(OrtModelCompilationOptions *, const void *, size_t)
     * }
     */
    public static final long ModelCompilationOptions_SetInputModelFromBuffer$offset() {
        return ModelCompilationOptions_SetInputModelFromBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelFromBuffer)(OrtModelCompilationOptions *, const void *, size_t)
     * }
     */
    public static MemorySegment ModelCompilationOptions_SetInputModelFromBuffer(MemorySegment struct) {
        return struct.get(ModelCompilationOptions_SetInputModelFromBuffer$LAYOUT, ModelCompilationOptions_SetInputModelFromBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetInputModelFromBuffer)(OrtModelCompilationOptions *, const void *, size_t)
     * }
     */
    public static void ModelCompilationOptions_SetInputModelFromBuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ModelCompilationOptions_SetInputModelFromBuffer$LAYOUT, ModelCompilationOptions_SetInputModelFromBuffer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static class ModelCompilationOptions_SetOutputModelPath {

        ModelCompilationOptions_SetOutputModelPath() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ModelCompilationOptions_SetOutputModelPath.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ModelCompilationOptions_SetOutputModelPath.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ModelCompilationOptions_SetOutputModelPath$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ModelCompilationOptions_SetOutputModelPath"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static final AddressLayout ModelCompilationOptions_SetOutputModelPath$layout() {
        return ModelCompilationOptions_SetOutputModelPath$LAYOUT;
    }

    private static final long ModelCompilationOptions_SetOutputModelPath$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static final long ModelCompilationOptions_SetOutputModelPath$offset() {
        return ModelCompilationOptions_SetOutputModelPath$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static MemorySegment ModelCompilationOptions_SetOutputModelPath(MemorySegment struct) {
        return struct.get(ModelCompilationOptions_SetOutputModelPath$LAYOUT, ModelCompilationOptions_SetOutputModelPath$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelPath)(OrtModelCompilationOptions *, const char *)
     * }
     */
    public static void ModelCompilationOptions_SetOutputModelPath(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ModelCompilationOptions_SetOutputModelPath$LAYOUT, ModelCompilationOptions_SetOutputModelPath$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelExternalInitializersFile)(OrtModelCompilationOptions *, const char *, size_t)
     * }
     */
    public static class ModelCompilationOptions_SetOutputModelExternalInitializersFile {

        ModelCompilationOptions_SetOutputModelExternalInitializersFile() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ModelCompilationOptions_SetOutputModelExternalInitializersFile.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ModelCompilationOptions_SetOutputModelExternalInitializersFile.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ModelCompilationOptions_SetOutputModelExternalInitializersFile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ModelCompilationOptions_SetOutputModelExternalInitializersFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelExternalInitializersFile)(OrtModelCompilationOptions *, const char *, size_t)
     * }
     */
    public static final AddressLayout ModelCompilationOptions_SetOutputModelExternalInitializersFile$layout() {
        return ModelCompilationOptions_SetOutputModelExternalInitializersFile$LAYOUT;
    }

    private static final long ModelCompilationOptions_SetOutputModelExternalInitializersFile$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelExternalInitializersFile)(OrtModelCompilationOptions *, const char *, size_t)
     * }
     */
    public static final long ModelCompilationOptions_SetOutputModelExternalInitializersFile$offset() {
        return ModelCompilationOptions_SetOutputModelExternalInitializersFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelExternalInitializersFile)(OrtModelCompilationOptions *, const char *, size_t)
     * }
     */
    public static MemorySegment ModelCompilationOptions_SetOutputModelExternalInitializersFile(MemorySegment struct) {
        return struct.get(ModelCompilationOptions_SetOutputModelExternalInitializersFile$LAYOUT, ModelCompilationOptions_SetOutputModelExternalInitializersFile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelExternalInitializersFile)(OrtModelCompilationOptions *, const char *, size_t)
     * }
     */
    public static void ModelCompilationOptions_SetOutputModelExternalInitializersFile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ModelCompilationOptions_SetOutputModelExternalInitializersFile$LAYOUT, ModelCompilationOptions_SetOutputModelExternalInitializersFile$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelBuffer)(OrtModelCompilationOptions *, OrtAllocator *, void **, size_t *)
     * }
     */
    public static class ModelCompilationOptions_SetOutputModelBuffer {

        ModelCompilationOptions_SetOutputModelBuffer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ModelCompilationOptions_SetOutputModelBuffer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ModelCompilationOptions_SetOutputModelBuffer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ModelCompilationOptions_SetOutputModelBuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ModelCompilationOptions_SetOutputModelBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelBuffer)(OrtModelCompilationOptions *, OrtAllocator *, void **, size_t *)
     * }
     */
    public static final AddressLayout ModelCompilationOptions_SetOutputModelBuffer$layout() {
        return ModelCompilationOptions_SetOutputModelBuffer$LAYOUT;
    }

    private static final long ModelCompilationOptions_SetOutputModelBuffer$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelBuffer)(OrtModelCompilationOptions *, OrtAllocator *, void **, size_t *)
     * }
     */
    public static final long ModelCompilationOptions_SetOutputModelBuffer$offset() {
        return ModelCompilationOptions_SetOutputModelBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelBuffer)(OrtModelCompilationOptions *, OrtAllocator *, void **, size_t *)
     * }
     */
    public static MemorySegment ModelCompilationOptions_SetOutputModelBuffer(MemorySegment struct) {
        return struct.get(ModelCompilationOptions_SetOutputModelBuffer$LAYOUT, ModelCompilationOptions_SetOutputModelBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetOutputModelBuffer)(OrtModelCompilationOptions *, OrtAllocator *, void **, size_t *)
     * }
     */
    public static void ModelCompilationOptions_SetOutputModelBuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ModelCompilationOptions_SetOutputModelBuffer$LAYOUT, ModelCompilationOptions_SetOutputModelBuffer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetEpContextEmbedMode)(OrtModelCompilationOptions *, bool)
     * }
     */
    public static class ModelCompilationOptions_SetEpContextEmbedMode {

        ModelCompilationOptions_SetEpContextEmbedMode() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, boolean _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_BOOL
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(ModelCompilationOptions_SetEpContextEmbedMode.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(ModelCompilationOptions_SetEpContextEmbedMode.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, boolean _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout ModelCompilationOptions_SetEpContextEmbedMode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ModelCompilationOptions_SetEpContextEmbedMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetEpContextEmbedMode)(OrtModelCompilationOptions *, bool)
     * }
     */
    public static final AddressLayout ModelCompilationOptions_SetEpContextEmbedMode$layout() {
        return ModelCompilationOptions_SetEpContextEmbedMode$LAYOUT;
    }

    private static final long ModelCompilationOptions_SetEpContextEmbedMode$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetEpContextEmbedMode)(OrtModelCompilationOptions *, bool)
     * }
     */
    public static final long ModelCompilationOptions_SetEpContextEmbedMode$offset() {
        return ModelCompilationOptions_SetEpContextEmbedMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetEpContextEmbedMode)(OrtModelCompilationOptions *, bool)
     * }
     */
    public static MemorySegment ModelCompilationOptions_SetEpContextEmbedMode(MemorySegment struct) {
        return struct.get(ModelCompilationOptions_SetEpContextEmbedMode$LAYOUT, ModelCompilationOptions_SetEpContextEmbedMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*ModelCompilationOptions_SetEpContextEmbedMode)(OrtModelCompilationOptions *, bool)
     * }
     */
    public static void ModelCompilationOptions_SetEpContextEmbedMode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ModelCompilationOptions_SetEpContextEmbedMode$LAYOUT, ModelCompilationOptions_SetEpContextEmbedMode$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * OrtStatusPtr (*CompileModel)(const OrtEnv *, const OrtModelCompilationOptions *)
     * }
     */
    public static class CompileModel {

        CompileModel() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(CompileModel.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(CompileModel.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout CompileModel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CompileModel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CompileModel)(const OrtEnv *, const OrtModelCompilationOptions *)
     * }
     */
    public static final AddressLayout CompileModel$layout() {
        return CompileModel$LAYOUT;
    }

    private static final long CompileModel$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CompileModel)(const OrtEnv *, const OrtModelCompilationOptions *)
     * }
     */
    public static final long CompileModel$offset() {
        return CompileModel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CompileModel)(const OrtEnv *, const OrtModelCompilationOptions *)
     * }
     */
    public static MemorySegment CompileModel(MemorySegment struct) {
        return struct.get(CompileModel$LAYOUT, CompileModel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * OrtStatusPtr (*CompileModel)(const OrtEnv *, const OrtModelCompilationOptions *)
     * }
     */
    public static void CompileModel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CompileModel$LAYOUT, CompileModel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

