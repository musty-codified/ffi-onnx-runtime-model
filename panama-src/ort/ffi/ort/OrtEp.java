// Generated by jextract

package ffi.ort;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct OrtEp {
 *     uint32_t ort_version_supported;
 *     const char *(*GetName)(const OrtEp *);
 * }
 * }
 */
public class OrtEp {

    OrtEp() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        onnxruntime_c_api_h.C_INT.withName("ort_version_supported"),
        MemoryLayout.paddingLayout(4),
        onnxruntime_c_api_h.C_POINTER.withName("GetName")
    ).withName("OrtEp");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ort_version_supported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ort_version_supported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t ort_version_supported
     * }
     */
    public static final OfInt ort_version_supported$layout() {
        return ort_version_supported$LAYOUT;
    }

    private static final long ort_version_supported$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t ort_version_supported
     * }
     */
    public static final long ort_version_supported$offset() {
        return ort_version_supported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t ort_version_supported
     * }
     */
    public static int ort_version_supported(MemorySegment struct) {
        return struct.get(ort_version_supported$LAYOUT, ort_version_supported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t ort_version_supported
     * }
     */
    public static void ort_version_supported(MemorySegment struct, int fieldValue) {
        struct.set(ort_version_supported$LAYOUT, ort_version_supported$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const char *(*GetName)(const OrtEp *)
     * }
     */
    public static class GetName {

        GetName() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            onnxruntime_c_api_h.C_POINTER,
            onnxruntime_c_api_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = onnxruntime_c_api_h.upcallHandle(GetName.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetName.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *(*GetName)(const OrtEp *)
     * }
     */
    public static final AddressLayout GetName$layout() {
        return GetName$LAYOUT;
    }

    private static final long GetName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *(*GetName)(const OrtEp *)
     * }
     */
    public static final long GetName$offset() {
        return GetName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *(*GetName)(const OrtEp *)
     * }
     */
    public static MemorySegment GetName(MemorySegment struct) {
        return struct.get(GetName$LAYOUT, GetName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *(*GetName)(const OrtEp *)
     * }
     */
    public static void GetName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetName$LAYOUT, GetName$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

